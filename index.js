// Generated by IcedCoffeeScript 108.0.9
(function() {
  var Stampery, crypto, iced, request, retry, stream, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  crypto = require('crypto');

  request = require('request');

  stream = require('stream');

  retry = require('retry');

  Stampery = (function() {
    function Stampery(apiSecret, beta) {
      var auth, md5;
      this.apiSecret = apiSecret;
      this.beta = beta;
      md5 = crypto.createHash('md5');
      md5.update(this.apiSecret);
      md5 = md5.digest('hex');
      this.clientId = md5.substring(0, 15);
      auth = new Buffer("" + this.clientId + ":" + this.apiSecret).toString('base64');
      this.req = request.defaults({
        baseUrl: !this.beta ? 'https://api.stampery.com/v2' : 'https://stampery-api-beta.herokuapp.com/v2',
        json: true,
        headers: {
          'Authorization': auth
        }
      });
    }

    Stampery.prototype.hash = function(data) {
      var hash;
      hash = crypto.createHash('sha256');
      hash.update(data);
      return hash.digest('hex');
    };

    Stampery.prototype.stamp = function(data, file, cb) {
      if ((file != null) && (cb != null)) {
        return this._stampFile(data, file, cb);
      } else {
        return this._stampJSON(data, file);
      }
    };

    Stampery.prototype._stampJSON = function(data, cb) {
      var operation;
      operation = retry.operation({
        retries: 3,
        minTimeout: 2 * 1000,
        maxTimeout: 2 * 1000
      });
      return operation.attempt((function(_this) {
        return function(currentAttempt) {
          var body, err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/pablo/Dropbox/Workspace/Stampery/node/index.iced"
            });
            _this.req.post({
              uri: '/stamps',
              json: data
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  res = arguments[1];
                  return body = arguments[2];
                };
              })(),
              lineno: 40
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref;
            if (operation.retry(err)) {
              return;
            }
            return cb((err ? operation.mainError() : null), (_ref = res.body) != null ? _ref.hash : void 0);
          });
        };
      })(this));
    };

    Stampery.prototype._stampFile = function(data, file, cb) {
      var operation;
      if (data == null) {
        data = {};
      }
      operation = retry.operation({
        retries: 3,
        minTimeout: 2 * 1000,
        maxTimeout: 2 * 1000
      });
      return operation.attempt((function(_this) {
        return function(currentAttempt) {
          var body, err, formData, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          formData = {
            data: data
          };
          if (file instanceof stream) {
            (file.path != null) && (formData.data.name = file.path.split('/').slice(-1)[0]);
          }
          formData.file = {
            value: file,
            options: {
              filename: formData.data.name
            }
          };
          formData.data = JSON.stringify(formData.data);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/pablo/Dropbox/Workspace/Stampery/node/index.iced"
            });
            _this.req.post({
              uri: '/stamps',
              formData: formData
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  res = arguments[1];
                  return body = arguments[2];
                };
              })(),
              lineno: 67
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref;
            if (operation.retry(err)) {
              return;
            }
            return cb((err ? operation.mainError() : null), (_ref = res.body) != null ? _ref.hash : void 0);
          });
        };
      })(this));
    };

    Stampery.prototype.get = function(hash, cb) {
      var err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/pablo/Dropbox/Workspace/Stampery/node/index.iced",
            funcname: "Stampery.get"
          });
          _this.req.get("/stamps/" + hash, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 74
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          return cb(err, (_ref = res.body) != null ? _ref.stamp : void 0);
        };
      })(this));
    };

    return Stampery;

  })();

  module.exports = Stampery;

}).call(this);
